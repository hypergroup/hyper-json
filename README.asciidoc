hyper+json
==========
:toc:
:numbered:

== Document Status
Author::
  Cameron Bytheway <cameron@hypergroup.io>
  Tim Shadel

Status::
  *[white red-background]#Working Draft#*

////
  *[white blue-background]#Submitted to IANA#*
  *[white green-background]#Approved by IANA#*
////

Last Updated::
  {docdate}
Proposed IANA Registrations::
  +application/hyper+json+

== General
hyper+json is a JSON based hypermedia format designed for simplicty and flexibility.

=== Design Goals
hyper+json strives for simplicity:

 * Simple to understand
 * Simple to write
 * Simple to consume
 * Simple to extend

It also tries to be as familiar as possible to JSON users.

=== Compliance
An implementation is not compliant if it fails to satisfy one or more of the MUST or REQUIRED elements. An implementation that satisfies all the MUST and REQUIRED elements as well as all the SHOULD and RECOMMENDED elements is said to be "unconditionally compliant"; one that satisfies all the MUST and REQUIRED elements but not all the SHOULD and RECOMMENDED elements is said to be "conditionally compliant."

[NOTE]
====
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.
====

== Hypermedia Model


=== root
The most basic hyper+json resource is an object which MUST contain an +href+:

[source,json]
----
{
  "href": "/"
}
----

=== property
hyper+json resources can have arbitrary properties mixed with the hypermedia controls:

[source,json]
----
{
  "href": "/users/cameron",
  "name": "Cameron",
  "addresses": {
    "home": {
      "street": "123 Fake St.",
      "city": "Nowhere",
      "country": "USA",
      "zip": 12345
    },
    "work": { }
  },
  "likes": [
    "hot-dogs",
    "spoons",
    "toasters"
  ]
}
----

=== link
A hypermedia link is represented as an object with a +href+ property. It MAY have any other properties as desired:

[source,json]
----
{
  "href": "/users/cameron",
  "name": "Cameron",
  "friends": {
    "href": "/users/cameron/friends",
    "count": 123
  },
  "likes": [
    {"href": "/likes/hot-dogs"},
    {"href": "/likes/spoons"},
    {"href": "/likes/toasters"}
  ]
}
----

Servers MAY use http://tools.ietf.org/html/rfc6901[JSON Pointers] prefixed with a '\#'. If +href+ starts with '#' the pointer references a local property:

[source,json]
----
{
  "href": "/users/cameron",
  "name": "Cameron",
  "first-name": {
    "href": "#/name"
  },
  "status": {
    "href": "/users/cameron/statuses#/0/text"
  },
  "status-updates": {
    "href": "/users/cameron/statuses#/count"
  }
}

{
  "href": "/users/cameron/statuses",
  "collection": [
    {"text": "I'm happy!"},
    {"text": "Kinda sad... :("}
  ],
  "count": 2
}
----

=== form
A hypermedia form is represented as an object with an +action+ property. It SHOULD have a +method+ property that is specific to the protocol i.e. GET, POST, PUT, DELETE, etc for HTTP.

[source,json]
----
{
  "href": "/users/cameron",
  "name": "Cameron",
  "update": {
    "action": "/users/cameron",
    "method": "PUT",
    "input": {
      "name": {
        "type": "text",
        "required": true,
        "value": "Cameron"
      }
    }
  }
}
----

The content-body when submitting the form in this example should be:

[source,json]
----
{ "name": "Tim" }
----

Clients SHOULD assume the acceptable type is +application/json+, unless specified in the +enctype+:

[source,json]
----
{
  "href": "/users/cameron",
  "name": "Cameron",
  "update": {
    "action": "/users/cameron",
    "method": "PUT",
    "enctype": "application/x-www-form-urlencoded",
    "input": {
      "name": {
        "type": "text",
        "required": true,
        "value": "Cameron"
      }
    }
  }
}
----

with the body:

----
name=Mike
----

A client SHOULD only submit forms that have understood content-types.

=== input
An input control belongs to a form element. It is represented as an object. It contains no required properties. It MAY include the following properties:

type::
  Specifies the type of the input data. If the +type+ is not set, a client SHOULD default to type +text+. hyper+json borrows the types specified by the https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#attr-type[HTML 5 input element] specifies, along with the type +select+. Servers MAY choose to add more types as needed. Clients SHOULD only handle input types they understand.

value::
  Specifies the current or default value of the input. If +value+ is not set, clients SHOULD default to +null+.

Servers MAY choose to add more properties as needed. These properties SHOULD be specified in extensions.

=== collection
By default, hyper+json resources are single documents. To address a collection of documents servers SHOULD use the +collection+ property. Any included properties in the root document are associated to the collection itself.

[source,json]
----
{
  "href": "/users",
  "collection": [
    {"href": "/users/cameron"},
    {"href": "/users/tim"},
    {"href": "/users/mike"}
  ],
  "count": 3
}
----

Servers MAY choose to paginate collection. They SHOULD use the +next+ and +prev+ links to provide pagination:

[source,json]
----
{
  "href": "/users?page=1",
  "collection": [
    {"href": "/users/cameron"},
    {"href": "/users/tim"},
    {"href": "/users/mike"}
  ],
  "next": {
    "href": "/users?page=2"
  }
}

{
  "href": "/users?page=2",
  "collection": [
    {"href": "/users/ben"},
    {"href": "/users/josh"}
  ],
  "prev": {
    "href": "/users?page=1"
  }
}
----

=== error

[source,json]
----
{
  "TODO": true
}
----

== Examples

[source,json]
----
{
  "href": "http://example.org/users",
  "collection": [
    {"href": "http://example.org/users/1"},
    {"href": "http://example.org/users/2"},
    {"href": "http://example.org/users/3"}
  ]
}
----

[source,json]
----
{
  "href": "http://example.org/users/1",
  "name": "Cameron",
  "favorites": {
    "color": "red",
    "food": ["bananas", "potatoes", "cheese"]
  },
  "update": {
    "action": "http://example.org/users/1",
    "method": "PUT",
    "input": {
      "name": {
        "type": "text",
        "required": true,
        "value": "Cameron"
      },
      "color": {
        "type": "select",
        "options": [
          {"value": "red"},
          {"value": "blue"},
          {"value": "green"}
        ]
      },
      "food": {
        "type": "select",
        "multiple": true,
        "options": [
          {"value": "bananas"},
          {"value": "potatoes"},
          {"value": "cheese"},
          {"value": "carrots"}
        ]
      }
    }
  }
}
----

== Extensibility
This document describes the hyper+json markup vocabulary. Any extensions to the standard vocabulary MUST not redefine any objects (or their properties), arrays, properties, link relations, or data types defined in this document. Clients that do not recognize extensions to the standard vocabulary SHOULD ignore them.

The details of designing and implementing extensions is beyond the scope of this document.

[NOTE]
====
It is possible that future forward-compatible modifications to this specification will include new objects, arrays, properties, link-relations, and data types. Extension designers should take care to prevent future modifications from breaking or redefining those extensions.
====
